{"ast":null,"code":"var _jsxFileName = \"/home/supastishn/Desktop/supatube/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n  const checkDeviceVerification = async user => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/device-verification/check`, {\n        userId: user._id\n      }, {\n        headers: {\n          'Authorization': `Bearer ${user.token}`\n        }\n      });\n      const {\n        requiresVerification,\n        deviceId\n      } = response.data;\n      if (requiresVerification) {\n        // Store deviceId for later use\n        localStorage.setItem('deviceId', deviceId);\n\n        // Request verification code\n        await axios.post(`${API_BASE_URL}/api/device-verification/request`, {\n          userId: user._id,\n          email: user.email\n        }, {\n          headers: {\n            'Authorization': `Bearer ${user.token}`\n          }\n        });\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Device verification check failed:', error);\n      throw error;\n    }\n  };\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/users/login`, {\n        email,\n        password\n      });\n      const user = response.data;\n\n      // Check if device verification is needed\n      const needsVerification = await checkDeviceVerification(user);\n      if (needsVerification) {\n        // Store user temporarily\n        setCurrentUser(user);\n        localStorage.setItem('user', JSON.stringify(user));\n        return {\n          requiresVerification: true\n        };\n      }\n\n      // If no verification needed, proceed with normal login\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        requiresVerification: false\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || 'Failed to login');\n      throw err;\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('deviceId');\n    localStorage.removeItem('isDeviceVerified');\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    setError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"vSB9Nc0q2BGZUhjg31O+gFt0Mxs=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","API_BASE_URL","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","user","localStorage","getItem","JSON","parse","checkDeviceVerification","response","post","userId","_id","headers","token","requiresVerification","deviceId","data","setItem","email","console","login","password","needsVerification","stringify","err","_err$response","_err$response$data","logout","removeItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/supastishn/Desktop/supatube/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n\n  const checkDeviceVerification = async (user) => {\n    try {\n      const response = await axios.post(\n        `${API_BASE_URL}/api/device-verification/check`,\n        { userId: user._id },\n        { headers: { 'Authorization': `Bearer ${user.token}` }}\n      );\n\n      const { requiresVerification, deviceId } = response.data;\n\n      if (requiresVerification) {\n        // Store deviceId for later use\n        localStorage.setItem('deviceId', deviceId);\n        \n        // Request verification code\n        await axios.post(\n          `${API_BASE_URL}/api/device-verification/request`,\n          { \n            userId: user._id,\n            email: user.email\n          },\n          { headers: { 'Authorization': `Bearer ${user.token}` }}\n        );\n\n        return true;\n      }\n\n      return false;\n    } catch (error) {\n      console.error('Device verification check failed:', error);\n      throw error;\n    }\n  };\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/users/login`, {\n        email,\n        password\n      });\n\n      const user = response.data;\n\n      // Check if device verification is needed\n      const needsVerification = await checkDeviceVerification(user);\n\n      if (needsVerification) {\n        // Store user temporarily\n        setCurrentUser(user);\n        localStorage.setItem('user', JSON.stringify(user));\n        return { requiresVerification: true };\n      }\n\n      // If no verification needed, proceed with normal login\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      return { requiresVerification: false };\n    } catch (err) {\n      setError(err.response?.data?.error || 'Failed to login');\n      throw err;\n    }\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('deviceId');\n    localStorage.removeItem('isDeviceVerified');\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    setError\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}