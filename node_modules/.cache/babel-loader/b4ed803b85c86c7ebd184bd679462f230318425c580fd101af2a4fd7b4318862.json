{"ast":null,"code":"var _jsxFileName = \"/home/supastishn/Desktop/supatube/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [tempUserData, setTempUserData] = useState(null);\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n  const updateProfile = async (userData, profilePicture) => {\n    try {\n      const formData = new FormData();\n\n      // Add user data to form\n      Object.keys(userData).forEach(key => {\n        formData.append(key, userData[key]);\n      });\n\n      // Add profile picture if provided\n      if (profilePicture) {\n        formData.append('profilePicture', profilePicture);\n      }\n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      };\n      const response = await axios.put(`${API_BASE_URL}/api/users/profile`, formData, config);\n\n      // Update current user in state and localStorage\n      const updatedUser = {\n        ...currentUser,\n        ...response.data\n      };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      return updatedUser;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Failed to update profile');\n      throw err;\n    }\n  };\n  const checkVerificationStatus = async () => {\n    try {\n      if (!currentUser || !currentUser.token) return;\n      const response = await axios.get(`${API_BASE_URL}/api/auth/me`, {\n        headers: {\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      });\n\n      // Update the user data with the latest verification status\n      const updatedUser = {\n        ...currentUser,\n        isVerified: response.data.isVerified\n      };\n\n      // Only update if the verification status has changed\n      if (currentUser.isVerified !== response.data.isVerified) {\n        setCurrentUser(updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n      }\n      return updatedUser;\n    } catch (err) {\n      var _err$response2;\n      console.error('Error checking verification status:', err);\n      // If there's an auth error, clear the user data\n      if (((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : _err$response2.status) === 401) {\n        setCurrentUser(null);\n        localStorage.removeItem('user');\n      }\n    }\n  };\n\n  // Add an interval to check verification status periodically\n  useEffect(() => {\n    if (currentUser) {\n      // Check immediately\n      checkVerificationStatus();\n\n      // Then check every minute\n      const interval = setInterval(checkVerificationStatus, 60000);\n      return () => clearInterval(interval);\n    }\n  }, [currentUser === null || currentUser === void 0 ? void 0 : currentUser._id]);\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\n        email,\n        password\n      });\n      const user = response.data;\n\n      // Set the user as logged in\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // Check verification status immediately after login\n      await checkVerificationStatus();\n      return {\n        requiresVerification: false\n      };\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      const errorMessage = ((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || err.message || 'Failed to login';\n      setError(errorMessage);\n      throw err;\n    }\n  };\n  const verifyLoginCode = async code => {\n    try {\n      if (!tempUserData) {\n        throw new Error('No login attempt in progress');\n      }\n      const response = await axios.post(`${API_BASE_URL}/api/device-verification/verify`, {\n        userId: tempUserData._id,\n        code: code\n      });\n      if (response.data.verified) {\n        // Set the user as logged in\n        setCurrentUser(tempUserData);\n        localStorage.setItem('user', JSON.stringify(tempUserData));\n        setTempUserData(null);\n        return true;\n      }\n      return false;\n    } catch (err) {\n      throw err;\n    }\n  };\n  const logout = () => {\n    setCurrentUser(null);\n    setTempUserData(null);\n    localStorage.removeItem('user');\n  };\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    verifyLoginCode,\n    updateProfile,\n    setError,\n    checkVerificationStatus\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: !loading && children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"RFCtj3wEBG1kXnTGaMtR3o9eLDE=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","API_BASE_URL","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","error","setError","tempUserData","setTempUserData","user","localStorage","getItem","JSON","parse","updateProfile","userData","profilePicture","formData","FormData","Object","keys","forEach","key","append","config","headers","Authorization","token","response","put","updatedUser","data","setItem","stringify","err","_err$response","_err$response$data","message","checkVerificationStatus","get","isVerified","_err$response2","console","status","removeItem","interval","setInterval","clearInterval","_id","login","email","password","post","requiresVerification","_err$response3","_err$response3$data","errorMessage","verifyLoginCode","code","Error","userId","verified","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/supastishn/Desktop/supatube/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { API_BASE_URL } from '../config';\n\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const [tempUserData, setTempUserData] = useState(null);\n\n  useEffect(() => {\n    const user = localStorage.getItem('user');\n    if (user) {\n      setCurrentUser(JSON.parse(user));\n    }\n    setLoading(false);\n  }, []);\n\n  const updateProfile = async (userData, profilePicture) => {\n    try {\n      const formData = new FormData();\n      \n      // Add user data to form\n      Object.keys(userData).forEach(key => {\n        formData.append(key, userData[key]);\n      });\n      \n      // Add profile picture if provided\n      if (profilePicture) {\n        formData.append('profilePicture', profilePicture);\n      }\n      \n      const config = {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${currentUser.token}`\n        }\n      };\n      \n      const response = await axios.put(\n        `${API_BASE_URL}/api/users/profile`,\n        formData,\n        config\n      );\n      \n      // Update current user in state and localStorage\n      const updatedUser = { ...currentUser, ...response.data };\n      setCurrentUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n      \n      return updatedUser;\n    } catch (err) {\n      setError(err.response?.data?.message || 'Failed to update profile');\n      throw err;\n    }\n  };\n\n  const checkVerificationStatus = async () => {\n    try {\n      if (!currentUser || !currentUser.token) return;\n      \n      const response = await axios.get(`${API_BASE_URL}/api/auth/me`, {\n        headers: { Authorization: `Bearer ${currentUser.token}` }\n      });\n      \n      // Update the user data with the latest verification status\n      const updatedUser = {\n        ...currentUser,\n        isVerified: response.data.isVerified\n      };\n      \n      // Only update if the verification status has changed\n      if (currentUser.isVerified !== response.data.isVerified) {\n        setCurrentUser(updatedUser);\n        localStorage.setItem('user', JSON.stringify(updatedUser));\n      }\n      \n      return updatedUser;\n    } catch (err) {\n      console.error('Error checking verification status:', err);\n      // If there's an auth error, clear the user data\n      if (err.response?.status === 401) {\n        setCurrentUser(null);\n        localStorage.removeItem('user');\n      }\n    }\n  };\n\n  // Add an interval to check verification status periodically\n  useEffect(() => {\n    if (currentUser) {\n      // Check immediately\n      checkVerificationStatus();\n      \n      // Then check every minute\n      const interval = setInterval(checkVerificationStatus, 60000);\n      return () => clearInterval(interval);\n    }\n  }, [currentUser?._id]);\n\n  const login = async (email, password) => {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/api/auth/login`, {\n        email,\n        password\n      });\n\n      const user = response.data;\n      \n      // Set the user as logged in\n      setCurrentUser(user);\n      localStorage.setItem('user', JSON.stringify(user));\n      \n      // Check verification status immediately after login\n      await checkVerificationStatus();\n      \n      return { requiresVerification: false };\n    } catch (err) {\n      const errorMessage = err.response?.data?.message || err.message || 'Failed to login';\n      setError(errorMessage);\n      throw err;\n    }\n  };\n\n  const verifyLoginCode = async (code) => {\n    try {\n      if (!tempUserData) {\n        throw new Error('No login attempt in progress');\n      }\n\n      const response = await axios.post(`${API_BASE_URL}/api/device-verification/verify`, {\n        userId: tempUserData._id,\n        code: code\n      });\n\n      if (response.data.verified) {\n        // Set the user as logged in\n        setCurrentUser(tempUserData);\n        localStorage.setItem('user', JSON.stringify(tempUserData));\n        setTempUserData(null);\n        return true;\n      }\n      return false;\n    } catch (err) {\n      throw err;\n    }\n  };\n\n  const logout = () => {\n    setCurrentUser(null);\n    setTempUserData(null);\n    localStorage.removeItem('user');\n  };\n\n  const value = {\n    currentUser,\n    loading,\n    error,\n    login,\n    logout,\n    verifyLoginCode,\n    updateProfile,\n    setError,\n    checkVerificationStatus\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {!loading && children}\n    </AuthContext.Provider>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}